(int, int, int, int, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_uint(256), ds~load_uint(32), ds~load_int(32), ds~load_uint(64), ds~load_dict());               ;; read a 64 bit unsigned int from the slice and return it
}

() save_data(int public_key, int counter, int timestamp, int game_id, cell participants) impure inline {
    set_data(
            begin_cell()
                    .store_uint(public_key, 256)
                    .store_uint(counter, 32)
                    .store_uint(timestamp, 32)
                    .store_uint(game_id, 64)
                    .store_dict(participants)
                    .end_cell()
    );
}

() recv_internal(int msg_value, cell msg, slice in_msg_body) impure {
    ~dump(msg_value);
    throw_if(120, msg_value < 1000000000);
    throw_if(121, msg_value > 500000000000);
    slice cs = msg.begin_parse();
    var flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    slice signature = in_msg_body~load_bits(512);
    int op = in_msg_body~load_uint(32);
    (int public_key, int counter, int timestamp, int game_id, cell participants) = load_data();
    throw_unless(122, check_signature(slice_hash(in_msg_body), signature, public_key));

    if(op == 0) {
        int tx_game_id = in_msg_body~load_uint(64);
        if(counter != 0) {
            throw_unless(123, game_id == tx_game_id);
        }
                else {
                    game_id = tx_game_id;
                }

        int user_id = in_msg_body~load_uint(32);
        slice user_address = in_msg_body~load_msg_addr();
        if(counter >= 2) {
            throw_if(124, now() - timestamp > 60);
        }

        (slice participant, int flag) = participants~udict_delete_get?(64, user_id);
        if(flag == -1) {
            participants~udict_set(64, user_id,
                    begin_cell()
                            .store_coins(msg_value + participant~load_coins())
                            .store_slice(user_address)
                            .end_cell()
                            .begin_parse()
            );
        }
                else {
                    participants~udict_set(64, user_id,
                            begin_cell()
                                    .store_coins(msg_value)
                                    .store_slice(user_address)
                                    .end_cell()
                                    .begin_parse()
                    );

                    if(counter == 1) {
                        timestamp = now();
                    }

                    counter += 1;
                }
        save_data(public_key, counter, timestamp, game_id, participants);
    }
            else {
                if(op == 1) {
                    int commission = in_msg_body~load_uint(16);
                    int sum = 0;
                    int key = -1;
                    do {
                        (key, slice participant, int f) = participants.udict_get_next?(64, key);
                        if(f == -1) {
                            int amount = participant~load_coins();
                            sum += amount;
                        }
                    } until (~ f);

                    int sum_part = sum / 100;
                    int seed = cell_hash(begin_cell()
                            .store_uint(now(), 256)
                            .store_uint(block_lt(), 256)
                            .store_uint(cur_lt(), 256)
                            .store_uint(game_id, 64)
                            .end_cell());
                    randomize(seed);
                    int x = rand(101);
                    int sequence = 0;
                    key = -1;

                    do {
                        throw_if(125, counter < 2);
                        (key, slice participant, int f) = participants.udict_get_next?(64, key);
                        int amount = participant~load_coins();
                        int old_sequence = sequence;
                        sequence += amount ^/ sum_part;

                        if((x > old_sequence) & (x <= sequence)) {
                            int prize = sum - sum * commission / 100;
                            slice winner_address = participant~load_msg_addr();

                            var message = begin_cell()
                                    .store_uint(0x18, 6)
                                    .store_slice(winner_address)
                                    .store_coins(prize)
                                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                                    .end_cell();
                            send_raw_message(message, 1);

                            var log_message = begin_cell()
                                    .store_uint(0x18, 6)
                                    .store_slice(sender_address)
                                    .store_coins(0)
                                    .store_uint(0, 1 + 4 + 4 + 32 + 64 + 1 + 1)
                                    .store_coins(prize)
                                    .store_slice(winner_address)
                                    .store_uint(x, 256)
                                    .store_uint(game_id, 64)
                                    .end_cell();

                            send_raw_message(log_message, 128);
                            f = 0;
                        }
                    } until (~ f);

                    save_data(public_key, 0, 0, 0, new_dict());
                }
            }
}